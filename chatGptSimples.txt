const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const client = new Client();

// Servi√ßo de leitura do QR code
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

// Ap√≥s isso ele diz que foi tudo certo
client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

// Inicializa tudo
client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms)); // Fun√ß√£o para criar o delay entre uma a√ß√£o e outra

// Fun√ß√£o para encerrar o atendimento ap√≥s o tempo limite
const timeoutHandler = (chat, timeoutDuration) => {
    setTimeout(async () => {
        await chat.sendMessage('O atendimento ser√° encerrado por inatividade. Caso precise de mais assist√™ncia, por favor entre em contato novamente.');
        // Aqui, voc√™ pode tamb√©m encerrar a conversa ou bloquear o atendimento
    }, timeoutDuration);
}

// Fun√ß√£o para iniciar o atendimento
const startAttending = async (msg, contactName) => {
    const chat = await msg.getChat();

    await delay(3000); // Delay de 3 segundos
    await chat.sendStateTyping(); // Simulando digita√ß√£o
    await delay(3000);

    await client.sendMessage(msg.from, `Ol√°, ${contactName.split(" ")[0]}! üëã\n\nSou o assistente virtual da Fametro Leste.\n\nDigite o n√∫mero correspondente ao atendimento que deseja:\n\n1 - Participar da Comunidade Empremetro (Est√°gio/Emprego)\n2 - Cadastro Trabalhe Conosco\n3 - Carteirinha Estudantil\n4 - Assinatura do TCE\n5 - Cancelamento/Trancamento de matr√≠cula\n6 - Ouvidoria\n7 - Outras d√∫vidas`);

    // Inicia o timeout para 30 minutos
    timeoutHandler(chat, 30 * 60 * 1000); // 30 minutos de inatividade
}

// Fun√ß√£o para a intera√ß√£o aberta
const openQuestionHandler = async (msg, contactName) => {
    const chat = await msg.getChat();
    await delay(3000); // Delay de 3 segundos
    await chat.sendStateTyping(); // Simulando digita√ß√£o
    await delay(3000);

    await client.sendMessage(msg.from, `Ol√°, ${contactName.split(" ")[0]}! üëã\n\nPor favor, digite sua d√∫vida abaixo. Assim que um de nossos atendentes estiver dispon√≠vel, ir√° te atender.`);

    // Inicia o timeout para 1 hora
    timeoutHandler(chat, 60 * 60 * 1000); // 1 hora de inatividade
}

client.on('message', async msg => {
    if (msg.body.match(/(menu|Menu|dia|tarde|noite|oi|Oi|Ol√°|ol√°|ola|Ola)/i) && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();
        const contact = await msg.getContact();
        const name = contact.pushname;

        // Pergunta se o usu√°rio √© aluno ou n√£o
        await client.sendMessage(msg.from, 'Voc√™ √© aluno da Fametro Leste? Responda com "sim" ou "n√£o".');

        // Espera pela resposta do usu√°rio
        client.once('message', async (responseMsg) => {
            if (responseMsg.from === msg.from) {
                if (responseMsg.body.toLowerCase() === 'sim') {
                    // Se for aluno
                    await startAttending(msg, name);
                } else {
                    // Se n√£o for aluno
                    await startAttending(msg, name);
                }
            }
        });
    }

    // Atendimento aluno - op√ß√£o 1
    if (msg.body === '1' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();
        await client.sendMessage(msg.from, 'Atendimento: Comunidade Empremetro\n\nNos informe sua matr√≠cula e contato atualizado para que possamos lhe incluir na comunidade!');
        client.once('message', async (newMsg) => {
            if (newMsg.from === msg.from) {
                await chat.sendStateTyping();
                await client.sendMessage(msg.from, 'Obrigado! Em breve voc√™ ser√° incluso em nossa comunidade.');
            }
        });

        // Inicia o timeout para 30 minutos
        timeoutHandler(chat, 30 * 60 * 1000); // 30 minutos de inatividade
    }

    // Atendimento n√£o aluno - op√ß√£o 7
    if (msg.body === '7' && msg.from.endsWith('@c.us')) {
        const contact = await msg.getContact();
        const name = contact.pushname;
        await openQuestionHandler(msg, name);
    }

    // Se for outra op√ß√£o de atendimento, implementar as outras op√ß√µes da mesma forma (2-6)

});

