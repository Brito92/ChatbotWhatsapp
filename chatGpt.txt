const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const client = new Client();
const delay = ms => new Promise(res => setTimeout(res, ms));

let userStates = {}; // Estados dos usu√°rios

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

// Fun√ß√£o para enviar o menu principal
async function sendMenu(client, chatId, name) {
    await client.sendMessage(chatId,
        `Ol√°, ${name.split(" ")[0]}! üëã\n\nSou o assistente virtual da secretaria da Fametro Leste.\n\nDigite o n√∫mero correspondente ao atendimento que deseja:\n\n` +
        `1 - Comunidade Empremetro\n` +
        `2 - Cadastro Trabalhe Conosco\n` +
        `3 - Carteirinha Estudantil\n` +
        `4 - Assinatura do TCE\n` +
        `5 - Cancelamento/Trancamento de matr√≠cula\n` +
        `6 - Ouvidoria\n` +
        `7 - Outras d√∫vidas`
    );
}

// Fun√ß√£o de retorno ou encerramento
async function askReturnOrEnd(client, chatId) {
    await delay(3000);
    await client.sendMessage(chatId, "Deseja voltar ao menu? Digite *menu*.\nOu digite *encerrar* para finalizar o atendimento.");

    setTimeout(async () => {
        if (userStates[chatId] === 'waiting_return') {
            await client.sendMessage(chatId, "Encerramos o atendimento por inatividade. Caso precise, √© s√≥ nos chamar novamente. üëã");
            delete userStates[chatId];
        }
    }, 2 * 60 * 1000);
}

// In√≠cio do fluxo
client.on('message', async msg => {
    const chat = await msg.getChat();
    const contact = await msg.getContact();
    const name = contact.pushname || "Aluno(a)";
    const text = msg.body.trim().toLowerCase();

    // Primeiro contato: triagem
    if (!userStates[msg.from]) {
        userStates[msg.from] = 'initial_question';
        await delay(1000);
        await chat.sendStateTyping();
        await delay(1000);
        await client.sendMessage(msg.from, "Antes de come√ßarmos, voc√™ √© aluno da nossa institui√ß√£o?\n\n*1* - Sim\n*2* - N√£o");
        return;
    }

    // Fluxo: triagem
    if (userStates[msg.from] === 'initial_question') {
        if (text === '1') {
            userStates[msg.from] = 'student_q1';
            await client.sendMessage(msg.from, "√ìtimo! Qual o seu curso?");
        } else if (text === '2') {
            userStates[msg.from] = 'non_student_q1';
            await client.sendMessage(msg.from, "Legal! Voc√™ tem interesse em:\n\n*1* - Gradua√ß√£o\n*2* - P√≥s-gradua√ß√£o\n*3* - T√©cnico");
        } else {
            await client.sendMessage(msg.from, "‚ùó Por favor, responda apenas com *1* (Sim) ou *2* (N√£o).");
        }
        return;
    }

    // Fluxo: aluno
    if (userStates[msg.from] === 'student_q1') {
        userStates[msg.from] = 'student_q2';
        userStates[msg.from + '_curso'] = msg.body;
        await client.sendMessage(msg.from, "Obrigado! Agora informe sua matr√≠cula.");
        return;
    }

    if (userStates[msg.from] === 'student_q2') {
        const curso = userStates[msg.from + '_curso'];
        const matricula = msg.body;

        await client.sendMessage(msg.from, `‚úÖ Curso: ${curso}\n‚úÖ Matr√≠cula: ${matricula}\n\nObrigado pelas informa√ß√µes! Em breve um atendente ir√° te responder.`);
        delete userStates[msg.from + '_curso'];

        userStates[msg.from] = 'waiting_return';
        await askReturnOrEnd(client, msg.from);
        return;
    }

    // Fluxo: n√£o aluno
    if (userStates[msg.from] === 'non_student_q1') {
        const opcao = text;
        let tipo = '';

        if (opcao === '1') tipo = 'Gradua√ß√£o';
        else if (opcao === '2') tipo = 'P√≥s-gradua√ß√£o';
        else if (opcao === '3') tipo = 'T√©cnico';
        else {
            await client.sendMessage(msg.from, "Por favor, escolha uma op√ß√£o v√°lida: *1*, *2* ou *3*.");
            return;
        }

        userStates[msg.from] = 'non_student_q2';
        userStates[msg.from + '_interesse'] = tipo;
        await client.sendMessage(msg.from, `Perfeito! Gostaria de saber mais sobre:\n\n*1* - Valores\n*2* - Formas de ingresso`);
        return;
    }

    if (userStates[msg.from] === 'non_student_q2') {
        const tipo = userStates[msg.from + '_interesse'];
        const escolha = text;

        if (escolha === '1') {
            await client.sendMessage(msg.from, `üìå Os valores dos cursos de ${tipo} est√£o dispon√≠veis em nosso site: https://fametro.edu.br`);
        } else if (escolha === '2') {
            await client.sendMessage(msg.from, `üìå As formas de ingresso em ${tipo} incluem vestibular, ENEM e transfer√™ncia. Confira: https://fametro.edu.br`);
        } else {
            await client.sendMessage(msg.from, "Escolha apenas *1* (Valores) ou *2* (Formas de ingresso).");
            return;
        }

        delete userStates[msg.from + '_interesse'];
        userStates[msg.from] = 'waiting_return';
        await askReturnOrEnd(client, msg.from);
        return;
    }

    // Esperando escolha: menu ou encerrar
    if (userStates[msg.from] === 'waiting_return') {
        if (text === 'menu') {
            await sendMenu(client, msg.from, name);
            userStates[msg.from] = 'menu';
        } else if (text === 'encerrar') {
            await client.sendMessage(msg.from, "‚úÖ Atendimento encerrado. Obrigado pelo contato!");
            delete userStates[msg.from];
        }
        return;
    }

    // Esperando mensagem livre (op√ß√£o 7)
    if (userStates[msg.from] === 'awaiting_additional_info') {
        return;
    }

    // Se n√£o estiver no menu ainda, dispara o menu
    if (userStates[msg.from] !== 'menu') {
        await delay(2000);
        await chat.sendStateTyping();
        await delay(2000);
        await sendMenu(client, msg.from, name);
        userStates[msg.from] = 'menu';
        return;
    }

    // Menu principal: op√ß√µes 1‚Äì7
    if (/^[1-7]$/.test(text) && msg.from.endsWith('@c.us')) {
        await delay(2000);
        await chat.sendStateTyping();
        await delay(2000);

        switch (text) {
            case '1':
                await client.sendMessage(msg.from, "Atendimento: FM01\n\nPor favor, envie sua matr√≠cula e contato atualizado para inclus√£o na Comunidade Empremetro!");
                client.once('message', async (newMsg) => {
                    if (newMsg.from === msg.from) {
                        await delay(2000);
                        await chat.sendStateTyping();
                        await delay(2000);
                        await client.sendMessage(msg.from, "‚úÖ Obrigado pelas informa√ß√µes! Em breve voc√™ ser√° inclu√≠do.");
                        await askReturnOrEnd(client, msg.from);
                        userStates[msg.from] = 'waiting_return';
                    }
                });
                break;

            case '2':
                await client.sendMessage(msg.from, "Atendimento: FM02\n\nPreencha nosso formul√°rio: https://forms.gle/LGoEYNW8StXZQbCy8");
                await askReturnOrEnd(client, msg.from);
                userStates[msg.from] = 'waiting_return';
                break;

            case '3':
                await client.sendMessage(msg.from, "Atendimento: FM03\n\nFormul√°rio meia-passagem: https://forms.gle/dUvc93jHSUxVyUgx6");
                await askReturnOrEnd(client, msg.from);
                userStates[msg.from] = 'waiting_return';
                break;

            case '4':
                await client.sendMessage(msg.from, "Atendimento: FM004\n\nSe seu TCE foi enviado por e-mail, envie seu nome completo e CPF.");
                client.once('message', async (newMsg) => {
                    if (newMsg.from === msg.from) {
                        await delay(2000);
                        await chat.sendStateTyping();
                        await delay(2000);
                        await client.sendMessage(msg.from, "‚úÖ Informa√ß√£o recebida! Vamos verificar.");
                        await askReturnOrEnd(client, msg.from);
                        userStates[msg.from] = 'waiting_return'; } }); break;
                        case '5':
                            await client.sendMessage(msg.from, "Atendimento: FM05\n\nPara cancelamento/trancamento de matr√≠cula, compare√ßa ao setor NADI.");
                            await askReturnOrEnd(client, msg.from);
                            userStates[msg.from] = 'waiting_return';
                            break;
                
                        case '6':
                            await client.sendMessage(msg.from, "Atendimento: FM06\n\nLink: https://fametro.edu.br/ouvidoria/");
                            await askReturnOrEnd(client, msg.from);
                            userStates[msg.from] = 'waiting_return';
                            break;
                
                        case '7':
                            await client.sendMessage(msg.from, "Atendimento: FM07\n\nDescreva sua d√∫vida. Um de nossos atendentes responder√° em breve.");
                            userStates[msg.from] = 'awaiting_additional_info';
                            break;
                    }
                }
            });                
