const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const client = new Client();

const userStatus = new Map();    // Guarda o estado de cada usu√°rio (ex: aluno ou n√£o)
const userTimeouts = new Map();  // Guarda os timeouts ativos de cada usu√°rio

// Servi√ßo de leitura do QR code
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

// Ap√≥s isso ele diz que foi tudo certo
client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.on('disconnected', (reason) => {
    console.log('‚ùå Cliente desconectado. Motivo:', reason);
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

// Gerencia o timeout e permite cancelamento posterior
const timeoutHandler = (chat, timeoutDuration, userId) => {
    const timeoutId = setTimeout(async () => {
        await chat.sendMessage('O atendimento ser√° encerrado por inatividade. Caso precise de mais assist√™ncia, por favor entre em contato novamente.');
        userStatus.delete(userId);
        userTimeouts.delete(userId);
    }, timeoutDuration);

    userTimeouts.set(userId, timeoutId);
}

const endAttending = async (msg, chat) => {
    // Cancela o timeout, se existir
    const timeoutId = userTimeouts.get(msg.from);
    if (timeoutId) {
        clearTimeout(timeoutId);
        userTimeouts.delete(msg.from);
    }

    userStatus.delete(msg.from);
    await chat.sendMessage('O atendimento foi encerrado. Caso precise de mais ajuda, entre em contato novamente. At√© logo! üëã');
}

const startAttending = async (msg, contactName, isAluno) => {
    const chat = await msg.getChat();
    userStatus.set(msg.from, { isAluno });

    await delay(3000);
    await chat.sendStateTyping();
    await delay(3000);

    if (isAluno) {
        await client.sendMessage(msg.from,
            `Ol√°, ${contactName.split(" ")[0]}! üëã\n\nSou o assistente virtual da Fametro Leste.\n\nPrezado(a) aluno(a), digite o n√∫mero correspondente ao atendimento que deseja:\n\n1 - Participar da Comunidade Empremetro (Est√°gio/Emprego)\n2 - Cadastro Trabalhe Conosco\n3 - Carteirinha Estudantil\n4 - Assinatura do TCE\n5 - Cancelamento/Trancamento de matr√≠cula\n6 - Ouvidoria\n7 - Outras d√∫vidas\n\nDigite 'encerrar' a qualquer momento para finalizar o atendimento.`
        );
    } else {
        await client.sendMessage(msg.from,
            `Ol√°, ${contactName.split(" ")[0]}! üëã\n\nSou o assistente virtual da Fametro Leste.\n\nComo n√£o-aluno, digite o n√∫mero correspondente ao atendimento que deseja:\n\n1 - Cadastro de Interesse para Comunidade Empremetro\n2 - Cadastro Trabalhe Conosco\n3 - Ouvidoria\n4 - Outras d√∫vidas\n\nDigite 'encerrar' a qualquer momento para finalizar o atendimento.`
        );
    }

    timeoutHandler(chat, 30 * 60 * 1000, msg.from); // 30 minutos
}

const openQuestionHandler = async (msg, contactName) => {
    const chat = await msg.getChat();
    await delay(3000);
    await chat.sendStateTyping();
    await delay(3000);

    await client.sendMessage(msg.from,
        `Ol√°, ${contactName.split(" ")[0]}! üëã\n\nPor favor, digite sua d√∫vida abaixo. Assim que um de nossos atendentes estiver dispon√≠vel, ir√° te atender.\n\nDigite 'encerrar' a qualquer momento para finalizar o atendimento.`
    );

    timeoutHandler(chat, 60 * 60 * 1000, msg.from); // 1 hora
}

client.on('message', async msg => {
    const chat = await msg.getChat();

    if (msg.body.toLowerCase() === 'encerrar' && msg.from.endsWith('@c.us')) {
        await endAttending(msg, chat);
        return;
    }

    if (msg.body.match(/(menu|oi|ol√°|ola)/i) && msg.from.endsWith('@c.us')) {
        const contact = await msg.getContact();
        const name = contact.pushname;

        await client.sendMessage(msg.from, 'Voc√™ √© aluno da Fametro Leste? Responda com "sim" ou "n√£o".');

        client.once('message', async (responseMsg) => {
            if (responseMsg.from === msg.from) {
                const answer = responseMsg.body.toLowerCase();
                if (answer === 'sim') {
                    await startAttending(responseMsg, name, true);
                } else if (answer === 'n√£o' || answer === 'nao') {
                    await startAttending(responseMsg, name, false);
                } else {
                    await client.sendMessage(msg.from, 'Por favor, responda apenas com "sim" ou "n√£o".');
                }
            }
        });
    }

    const status = userStatus.get(msg.from);
    if (!status) return;

    // ALUNO
    if (status.isAluno) {
        if (msg.body === '1') {
            await client.sendMessage(msg.from, 'Atendimento: Comunidade Empremetro\n\nNos informe sua matr√≠cula e contato atualizado para que possamos lhe incluir na comunidade!');
            client.once('message', async (newMsg) => {
                if (newMsg.from === msg.from) {
                    await chat.sendStateTyping();
                    await client.sendMessage(msg.from, 'Obrigado! Em breve voc√™ ser√° incluso em nossa comunidade.');
                }
            });
            timeoutHandler(chat, 30 * 60 * 1000, msg.from);
        } else if (msg.body === '7') {
            const contact = await msg.getContact();
            const name = contact.pushname;
            await openQuestionHandler(msg, name);
        }
        // Adicione as op√ß√µes 2 a 6 conforme necess√°rio
    }

    // N√ÉO-ALUNO
    if (!status.isAluno) {
        if (msg.body === '1') {
            await client.sendMessage(msg.from, 'Cadastro de Interesse: Comunidade Empremetro\n\nPor favor, informe seu nome completo e contato atualizado.');
            client.once('message', async (newMsg) => {
                if (newMsg.from === msg.from) {
                    await chat.sendStateTyping();
                    await client.sendMessage(msg.from, 'Obrigado! Em breve entraremos em contato.');
                }
            });
            timeoutHandler(chat, 30 * 60 * 1000, msg.from);
        } else if (msg.body === '4') {
            const contact = await msg.getContact();
            const name = contact.pushname;
            await openQuestionHandler(msg, name);
        }
        // Adicione as op√ß√µes 2 e 3 conforme necess√°rio
    }
});
