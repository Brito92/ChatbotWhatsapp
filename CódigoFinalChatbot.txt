const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, Buttons, List, MessageMedia } = require('whatsapp-web.js');

const client = new Client({
    authStrategy: new LocalAuth()
});


const userStates = new Map();
const userTimeouts = new Map();

const delay = ms => new Promise(res => setTimeout(res, ms));

function setUserState(userId, state, isAluno = null) {
    const current = userStates.get(userId) || {};
    userStates.set(userId, { ...current, state, ...(isAluno !== null && { isAluno }) });
}

function getUserState(userId) {
    return userStates.get(userId) || { state: 'inicio' };
}

function timeoutHandler(chat, timeoutDuration, userId) {
    // Cancela o timeout anterior se existir
    const existingTimeout = userTimeouts.get(userId);
    if (existingTimeout) {
        clearTimeout(existingTimeout);
    }

    // Cria novo timeout
    const timeoutId = setTimeout(async () => {
        await chat.sendMessage('O atendimento será encerrado por inatividade. Caso precise de mais assistência, por favor entre em contato novamente.');
        userStates.delete(userId);
        userTimeouts.delete(userId);
    }, timeoutDuration);

    userTimeouts.set(userId, timeoutId);
}

async function endAttending(msg, chat) {
    const timeoutId = userTimeouts.get(msg.from);
    if (timeoutId) {
        clearTimeout(timeoutId);
        userTimeouts.delete(msg.from);
    }
    userStates.delete(msg.from);
    await chat.sendMessage('O atendimento foi encerrado. Caso precise de mais ajuda, entre em contato novamente. Até logo! 👋');
}

async function startAttending(msg, contactName, isAluno) {
    const chat = await msg.getChat();
    setUserState(msg.from, isAluno ? 'menu_aluno' : 'menu_nao_aluno', isAluno);

    await delay(3000);
    await chat.sendStateTyping();
    await delay(3000);

    const nome = typeof contactName === 'string' ? contactName.split(" ")[0] : 'usuário';
    const menuAluno = `Olá, ${nome}! 👋\n\nSou o assistente virtual da Fametro Leste.\n\nPrezado(a) aluno(a), digite o número correspondente ao atendimento que deseja:\n\n1 - Retorno de requerimentos\n2 - Financeiro\n3 - Declarações ou histórico escolar\n4 - Justificativa de falta\n5 - Pós-graduação ou técnico\n6 - Trabalhe conosco (Estágio/Emprego)\n7 - Cadastro/recadastro Carteirinha Estudantil\n8 - Assinatura do TCE\n9 - Cancelamento/Trancamento de matrícula\n10 - Guia de Transferência/Histórico e Ementas\n11 - Ouvidoria\n12 - Outras dúvidas\n\nDigite 'encerrar' a qualquer momento para finalizar o atendimento.`;

    const menuNaoAluno = `Olá, ${nome}! 👋\n\nSou o assistente virtual da Fametro Leste.\n\nPrezado(a), digite o número correspondente ao atendimento que deseja:\n\n1 - Informações sobre os cursos\n2 - Formas de ingresso\n3 - Ouvidoria\n4 - Falar com um atendente\n\nDigite 'encerrar' a qualquer momento para finalizar o atendimento.`;

    await client.sendMessage(msg.from, isAluno ? menuAluno : menuNaoAluno);

    timeoutHandler(chat, 30 * 60 * 1000, msg.from);
}

async function openQuestionHandler(msg, contactName) {
    const chat = await msg.getChat();
    await delay(3000);
    await chat.sendStateTyping();
    await delay(3000);

    await client.sendMessage(msg.from,
        `>Código atendimento: AG0114#\n\nOlá, ${contactName.split(" ")[0]}! 👋\n\nPor favor, digite sua dúvida abaixo. Assim que um de nossos atendentes estiver disponível, irá te atender.\n\nDigite 'encerrar' a qualquer momento para finalizar o atendimento.`
    );

    timeoutHandler(chat, 60 * 60 * 1000, msg.from);
}


console.log("Iniciando cliente...");
client.on('qr', qr => qrcode.generate(qr, { small: true }));
client.on('ready', () => console.log('Tudo certo! WhatsApp conectado.'));
client.on('disconnected', reason => console.log('❌ Cliente desconectado. Motivo:', reason));
client.initialize();

const FSM = {
    'inicio': async (msg) => {
        if (/menu|oi|olá|ola|matr[ií]cula|curso|ajuda|d[úu]vida|quero|preciso/i.test(msg.body) || msg.body.length > 10) {
            await client.sendMessage(msg.from, 'Você é aluno da Fametro Leste? Responda com "sim" ou "não".');
            setUserState(msg.from, 'confirmando_aluno');
        }
    },
    'confirmando_aluno': async (msg, chat, name) => {
        const answer = msg.body.toLowerCase();
        if (answer === 'sim') {
            await startAttending(msg, name, true);
        } else if (["não", "nao"].includes(answer)) {
            await startAttending(msg, name, false);
        } else {
            await client.sendMessage(msg.from, 'Por favor, responda apenas com "sim" ou "não".');
        }
    },
    'menu_aluno': async (msg, chat) => await handleAlunoMenu(msg, chat),
    'menu_nao_aluno': async (msg, chat) => await handleNaoAlunoMenu(msg, chat),
    'esperando_dados_requerimento': async (msg, chat) => {
    await chat.sendStateTyping();
    await delay(1500);
    await client.sendMessage(msg.from, '> Código atendimento: RQM01#\n\nCerto, obrigado pelas informações! Em breve um de nossos atendentes irá te responder. 🕐');
    //setUserState(msg.from, 'menu_aluno');
    timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    },
    'esperando_dados_financeiro': async (msg, chat) => {
    await chat.sendStateTyping();
    await delay(1500);
    await client.sendMessage(msg.from, '> Código atendimento: FNC02#\n\nCerto, obrigado pelas informações! Em breve um de nossos atendentes irá te responder. 🕐');
    //setUserState(msg.from, 'menu_aluno');
    timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    },
    'aguardando_dados': async (msg, chat) => {
        const data = msg.body;
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, `> Código inclusão: EMPRE06#\n\nCerto, obrigada pelas informações!\nDigite "encerrar" para iniciar uma nova interação.`);
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    },
    'aguardando_dados_TCE': async (msg, chat) => {
        const data = msg.body;
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, `> Código atendimento: ATCE08#\n\nCerto, obrigada pelas informações!\nDigite "encerrar" para iniciar uma nova interação.`);
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    }
};

// Objeto de sessões dos usuários
//const userSessions = {};

const authorizedAgents = ['5592984336160@c.us']; // agente autorizado

function isAgent(number) {
    return authorizedAgents.includes(number);
}

// Quando o atendente assume
function setAttendingUser(userId, isBeingAttended = true) {
    userSessions[userId] = {
        ...userSessions[userId],
        beingAttended: isBeingAttended
    };
}

client.on('message', async msg => {
    const chat = await msg.getChat();
    if (msg.body.toLowerCase() === 'encerrar' && msg.from.endsWith('@c.us')) {
        await endAttending(msg, chat);
        return;
    }

    const user = getUserState(msg.from);
    const contact = await msg.getContact();
    const name = contact.pushname;

    if (chat.isGroup) {
        return;
    }

    const userId = msg.from;

     // ⚠️ Verifica se o remetente é um atendente autorizado
     if (msg.body === '!atender' && isAgent(userId)) {
        if (msg.mentionedIds.length === 0) {
            msg.reply('❗ Você precisa marcar o número do cliente para ativar o modo atendimento.');
            return;
        }

        const targetId = msg.mentionedIds[0];
        setAttendingUser(targetId, true);
        msg.reply(`🛑 O bot foi pausado para ${targetId}.`);
        return;
    }

    if (msg.body === '!finalizar' && isAgent(userId)) {
        if (msg.mentionedIds.length === 0) {
            msg.reply('❗ Você precisa marcar o número do cliente para finalizar o atendimento.');
            return;
        }

        const targetId = msg.mentionedIds[0];
        setAttendingUser(targetId, false);
        msg.reply(`✅ O atendimento de ${targetId} foi finalizado. O bot voltou a responder.`);
        return;
    }

    // Se o usuário está sendo atendido, o bot não responde
    if (userSessions[userId]?.beingAttended) {
        console.log(`Usuário ${userId} está em atendimento humano.`);
        return;
    }

    if (FSM[user.state]) {
        await FSM[user.state](msg, chat, name);
    }
});



async function handleAlunoMenu(msg, chat) {
    const introductions = {
        '1': '🔎 Vamos iniciar a verificação do seu requerimento.\n\nPor favor, envie os seguintes dados para que possamos verificar.',
        '2': '💰 Vamos tratar das questões financeiras.\n\nPor favor, envie os seguintes dados para que possamos verificar.',
        '3': '📄 Vamos te ajudar com declarações ou histórico escolar.',
        '4': '📝 Vamos lhe ajudar sobre sua justificativa de falta.',
        '5': '🎓 *Pós-graduação ou cursos técnicos.*',
        '6': '💼 Veja como se candidatar a vagas de estágio.',
        '7': '🪪 Cadastro/Recadastro Carteirinha Estudantil\n\nPor favor, preencha o formulário abaixo para que possamos aprovar sua meia-passagem.\n\nObs.: Somente para alunos de graduação. Caso seja ensino técnico, procurar o setor Fametrotec Leste.',
        '8': '🖊️ Vamos te ajudar com a assinatura do TCE.',
        '9': '🚫 Informações sobre cancelamento ou trancamento de matrícula.',
        '10': '> Guia de Transferência\nPara solicitar guia de transferência, se encaminhe ao setor NADI para a abertura do requerimento e oobtenção de maiores informações.',
        '11':'📢 Canal da Ouvidoria da instituição  '
    };

    const responses = {
        '1': '• Nome completo:\n• CPF:\n• Nº de matrícula:\n• Qual requerimento deseja retorno:\n• Data da solicitação:',
        '2': '• Nome completo:\n• CPF:\n• Nº de matrícula:\n• Qual questão financeira deseja que seja verificada?',
        '3': '> Declaração de matrícula/vínculo:\n\nAcessar o Portal do aluno: https://sistemas.portaledu.com.br/FrameHTML/web/app/edu/PortalEducacional/login/\n>> Ir em "Relatórios" \n>> Na opção "02.00.05.3 - DECLARAÇÃO DE VÍNCULO (PORTAL) (GRADUAÇÃO)", clicar em "emitir relatório" para baixar diretamente no seu dispositivo, com isso poderá também imprimir o documento.',
        '30': '> Histórico escolar:\n\nAcessar o Portal do Aluno: https://sistemas.portaledu.com.br/FrameHTML/web/app/edu/PortalEducacional/login/\n>> Ir em "Secretaria", na opção "Requerimentos"\n>> Selecionar a opção "EDU - Histórico Escolar 1ª Via" (caso seja sua 1ª solicitaçaõ desse documento),\nou a opção "EDU - Histórico Escolar 2ª Via" (caso seja sua 2ª ou + Via de requerimento)',
        '4': '> Justificativa de falta\n\nA documentação (declaração ou atestado) deve ser entregue na secretaria presencialmente. Prazo de 72h para entrega presencial (discente ou um responsável munido do atestado, RG e CPF originais do discente)',
        '40':'> Para alunos adventistas\n\nNecessário entregar presencialmente a declaração original com o carimbo e assinatura do responsável da igreja.',
        '5': '> Pós graduação:\n\n Entre em contato pelo telefone:\n +55 92 8455-4303\n\n> Técnico Leste\n\nEntrar em contato pelo telefone:\n +55 92 8555-1125.',
        '6': '💼 Comunidade Empremetro\n\nTodos os dias publicamos vagas de estágio e emprego - não só de empresas parceiras, como também de nossa instituição - para que você, nosso(a) prezado(a) aluno(a), possa se candidatar com mais facilidade e agilidade. Fique ligado(a) nas oportunidades! 😉\nCaso não faça parte da comunidade, envie seu nome completo e contato atualizado para incluírmos você em nossa comunidade\n\nCaso queira se cadastrar no banco de talento da Fametro Leste, acesse nosso formulário e preencha suas informações: https://forms.gle/TL6DB3TcBGkJY4rj7\n\nDigite "encerrar" caso não queira participar da comunidade Empremetro',
        '7': '> Formulário de cadastro\n\nhttps://forms.gle/gBFTa5dw94ud1ToD7',
        '8': 'Por favor, compareça com suas vias presencialmente para assinatura no setor NADI/CRA.\n\nImportante verificar:\n• Se há mais de uma via, para que uma via fique na instituição.\n• Se todas as vias estão assinadas por você (discente).\n• Se as informações da instituição estão corretas na documentação, principalmente um nome de um *responsável* da instuição.\n\nCaso tenha sido enviado via e-mail, informe seu nome completo e nº de matrícula para verificarmos, ou digite "encerrar" para finalizar esta interação.',
        '9': 'Prezado(a) aluno(a),\n\nSolicitações de cancelamento/trancamento devem ser feitas presencialmente no setor NADI/CRA.\n\n *Obs.*: Informações complementares à solicitação de cancelamento e trancamento podem ser encontradas na Cláusula Oitava e Cláusula Nona de seu contrato de matrícula, como também serão esclarecidas no ato do atendimento.',
        '10': '>Histórico e Ementas\nPara a solicitação de Histórico e Ementas, é necessário se encaminhar ao setor SECAD onde será feita a abertura da solicitação da documentação. Também pode ser feita a solicitação através do Portal do Aluno em >>Secretaria, >>Requerimentos, >>Opção "EDU - Programa de Disciplinas".',
        '11': 'Acesse o link para realizar uma ouvidoria(Elogios, Sugestões, Críticas e Informações): https://fametro.edu.br/ouvidoria/',
    };

    if (msg.body === '1') {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions['1']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses['1']);
        setUserState(msg.from, 'esperando_dados_requerimento'); // Aguarda dados do aluno
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    } else if (msg.body === '2') {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions['2']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses['2']);
        setUserState(msg.from, 'esperando_dados_financeiro'); // Aguarda dados do aluno
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    }  else if (msg.body === '3') {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions['3']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses['3']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(3500);
        await client.sendMessage(msg.from, responses['30']);
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    }  else if (msg.body === '4') {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions['4']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses['4']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(3500);
        await client.sendMessage(msg.from, responses['40']);
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    } else if (msg.body === '6') {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions['6']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses['6']);
        setUserState(msg.from, 'aguardando_dados'); // Aguarda dados do aluno
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    } else if (msg.body === '8') {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions['8']);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses['8']);
        setUserState(msg.from, 'aguardando_dados_TCE'); // Aguarda dados do aluno
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    } else if (['5', '7', '9', '10', '11'].includes(msg.body)) {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions[msg.body]);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses[msg.body]);
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    } else if (msg.body === '12') {
        const contact = await msg.getContact();
        await openQuestionHandler(msg, contact.pushname);
    } else {
        await client.sendMessage(msg.from, 'Digite "encerrar" caso queira iniciar uma nova interação.');
    }
}

async function handleNaoAlunoMenu(msg, chat) {
    const introductions = {
        '1': '📚 Informações sobre os cursos oferecidos pela Fametro.\nDeixe seus dados para que possamos entrar em contato e lhe apresentar nosso catálogo de cursos!',
        '2': '🛣️ Vamos te mostrar as formas de ingresso disponíveis.',
        '3': '📢 Canal da Ouvidoria da instituição.',
    };

    const responses = {
        '1': 'Nome completo, pretensão de curso ou somente o nome.',
        '2': '• ENEM\n• Fies\n• PBU\n• Vestibular Fametro (online ou presencial)\n• Portador de Diploma\n• Transferência Externa',
        '3': 'Acesse o link para realizar uma ouvidoria(Elogios, Sugestões, Críticas e Informações): https://fametro.edu.br/ouvidoria/',
    };

    if (responses[msg.body]) {
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, introductions[msg.body]);
        await delay(1500);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, responses[msg.body]);
        timeoutHandler(chat, 30 * 60 * 1000, msg.from);
    } else if (msg.body === '4') {
        const contact = await msg.getContact();
        await openQuestionHandler(msg, contact.pushname);
    } else {
        await client.sendMessage(msg.from, 'Digite "encerrar" caso queira iniciar uma nova interação.');
    }
}
