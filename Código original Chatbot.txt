// leitor de qr code
const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js'); // Mudan√ßa Buttons
const client = new Client();
// servi√ßo de leitura do qr code
client.on('qr', qr => {
    qrcode.generate(qr, {small: true});
});
// apos isso ele diz que foi tudo certo
client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});
// E inicializa tudo 
client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms)); // Fun√ß√£o que usamos para criar o delay entre uma a√ß√£o e outra

// Funil

client.on('message', async msg => {

    if (msg.body.match(/(menu|Menu|dia|tarde|noite|oi|Oi|Ol√°|ol√°|ola|Ola)/i) && msg.from.endsWith('@c.us')) {

        const chat = await msg.getChat();

        await delay(3000); //delay de 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        const contact = await msg.getContact(); //Pegando o contato
        const name = contact.pushname; //Pegando o nome do contato
        await client.sendMessage(msg.from,'Ol√°, '+ name.split(" ")[0] + '!üëã\n\nSou o assistente virtual do setor NADI da Fametro Leste.\n\nDigite o n√∫mero correspondente ao atendimento que deseja:\n\n1 - Participar da Comunidade Empremetro (Est√°gio/Emprego)\n2 - Cadastro Trabalhe Conosco\n3 - Carteirinha Estudantil\n4 - Assinatura do TCE\n5 - Cancelamento/Trancamento de matr√≠cula\n6 - Ouvidoria\n7 - Outras d√∫vidas'); //Primeira mensagem de texto
    
        
    }




    if (msg.body !== null && msg.body === '1' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();
        
        await delay(3000); //delay de 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Atendimento: Comunidade Empremetro\n\nPrezado(a) aluno(a),\n\n nos informe sua matr√≠cula e contato atualizado para que possamos lhe incluir na comunidade!');

        client.once('message', async (newMsg) => {
            if (newMsg.from === msg.from) { // Garante que √© a resposta do mesmo usu√°rio
                await delay(3000);
                await chat.sendStateTyping();
                await delay(3000);
                await client.sendMessage(msg.from, 'Obrigada pelas informa√ß√µes! Em breve voc√™ ser√° incluso em nossa comunidade.');
            }
        });
    }

    if (msg.body !== null && msg.body === '2' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();


        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Atendimento: Trabalhe Conosco - Fametro Leste\n\nA Fametro est√° aberta para receber seu curr√≠culo!\n\nPreencha nosso formul√°rio para que suas informa√ß√µes estejam em nosso banco de dados. \nDesde j√°, lhe desejamos boa sorte!.');

        await delay(3000); //delay de 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Link para cadastro: https://forms.gle/LGoEYNW8StXZQbCy8');
    }

    if (msg.body !== null && msg.body === '3' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();


        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Atendimento: Cadastro Carteirinha Estudantil\n\nPrezado(a) aluno,\n\nPreencha o formul√°rio a seguir para realizar seu cadastro.\nCaso voc√™ seja um aluno de ensino t√©cnico, compare√ßa ao setor de atendimento Fametrotec para solicitar a libera√ß√£o da meia-passagem estudantil.');
        
        await delay(3000); //delay de 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Aprova√ß√£o meia-passagem: https://forms.gle/dUvc93jHSUxVyUgx6');

    }

    if (msg.body !== null && msg.body === '4' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Atendiemnto: TCE\n\nPrezado(a) aluno(a),\n\nCaso esteja com as vias impressas do seu contrato de est√°gio, confirme em sua documenta√ß√£o se as informa√ß√µes est√£o corretas e verifique sua assinatura nas vias e traga-as para o setor NADI para assinatura da institui√ß√£o.\nLembrando que a institui√ß√£o precisar√° ficar (ap√≥s a finaliza√ß√£o das assinaturas) com uma via do documento. Caso seu TCE tenha sido enviado por e-mail pela empresa, envie seu nome completo e CPF para verificarmos.');


        client.once('message', async (newMsg) => {
            if (newMsg.from === msg.from) { // Garante que √© a resposta do mesmo usu√°rio
                await delay(3000);
                await chat.sendStateTyping();
                await delay(3000);
                await client.sendMessage(msg.from, 'Obrigada pelas informa√ß√µes! Em breve iremos verificar.');
            }
        });


    }

    if (msg.body !== null && msg.body === '5' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Atendimento: cancelamento/trancamento\n\nPrezado(a) aluno(a),\n\nPara cancelamento/trancamento de matr√≠cula, compare√ßa ao setor NADI para a abertura da solicita√ß√£o de forma presencial.\nCaso n√£o seja poss√≠vel comparecer por for√ßa maior, dever√° comparecer uma pessoa de sua confian√ßa com uma procura√ß√£o em m√£os devidamente autenticada e com os documentos devidos para abrirmos a solicita√ß√£o. Uma via dessa procura√ß√£o dever√° ficar na institui√ß√£o.');


    }


    if (msg.body !== null && msg.body === '6' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Atendimento: Ouvidoria\n\nPrezado(a) aluno(a),\n\nAcesse o link abaixo para realizar uma ouvidoria.');

        await delay(3000); //delay de 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Ouvidoria Fametro: https://fametro.edu.br/ouvidoria/');
    }

    if (msg.body !== null && msg.body === '7' && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();

        await delay(3000); //Delay de 3000 milisegundos mais conhecido como 3 segundos
        await chat.sendStateTyping(); // Simulando Digita√ß√£o
        await delay(3000);
        await client.sendMessage(msg.from, 'Prezado(a) aluno(a),\n\nDigite sua d√∫vida. Assim que um de nossos atendentes estiver dispon√≠vel, ir√° comparecer neste chat.');


    }




});